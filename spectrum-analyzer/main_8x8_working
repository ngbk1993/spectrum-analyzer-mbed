#include <arm_math.h>
#include "mbed.h"
#include "stats_report.h"
// Uses Daniil Guitelson's BGI library
DigitalOut latchPinCol(D8);
DigitalOut latchPinRow(D7);
DigitalOut clockPin(D12);
DigitalOut dataPin(D11);
AnalogIn MicIn(A0);
#define SampleFreq 17576
#define SamplingFreq 35150
int your_text[8] = {
	0b00000000,
	0b01101100,
	0b10010010,
	0b10000010,
	0b01000100,
	0b00101000,
        0b00010000,
	0b00000000
};

int N=8;
double data[8];
double samples[8];

Serial pc(USBTX, USBRX);

void shiftOut1(DigitalOut& mylatchPin, DigitalOut& myDataPin, DigitalOut&  myClockPin, char myDataOut) {

  // This shifts 8 bits out MSB first, 
  //on the rising edge of the clock,
  //clock idles low
 //internal function setup
  int i = 0;
  int pinState;

 //clear everything out just in case to
 //prepare shift register for bit shifting
  mylatchPin = 0;
  myDataPin  = 0;
  myClockPin = 0;
  //for each bit in the byte myDataOutï¿½
  //NOTICE THAT WE ARE COUNTING DOWN in our for loop
  //This means that %00000001 or "1" will go through such
  //that it will be pin Q0 that lights. 
  for (i=7; i>=0; i--)  {
  //for (i=0; i<8; i++)  {
    //if the value passed to myDataOut and a bitmask result 
    // true then... so if we are at i=6 and our value is
    // %11010100 it would the code compares it to %01000000 
    // and proceeds to set pinState to 1.
    myClockPin = 0;
    if ( myDataOut &  (1<<i) ) {
      
      pinState = 1;

    } else { 

      pinState = 0;

    }
    //Sets the pin to HIGH or LOW depending on pinState
    myDataPin = pinState;
    //register shifts bits on upstroke of clock pin  i
    myClockPin = 1;
    //zero the data pin after shift to prevent bleed through
    myDataPin  = 0;
  }
  myClockPin = 0;
  mylatchPin = 1;
}

void update_8x8_led(){

int SCAN_FREQUENCY = 50;

    for (int scanning_freq = 0; scanning_freq < SCAN_FREQUENCY; scanning_freq++){
        for (int j = 0; j < 8; j++) {
            //ground latchPin and hold low for as long as you are transmitting
            shiftOut1(latchPinRow, dataPin, clockPin, 1  << j);
    	    shiftOut1(latchPinCol, dataPin, clockPin, 0xff - your_text[j]);
	    wait_ms(1);
        }  
    }
}

void goertzel_fft(){
//  int N=8;
//  double data[N];
//  double samples[N];
  double freq;
  double s;
  double s_prev;
  double s_prev2;
  double coeff;
  double magn;
  int i;
  int char_i=0;
  double data_mag[N];
  double scale,xmin,ymin,xmax,ymax;

  // Find the maximum and minimum data range
  xmin=0;
  ymin=0;
  xmax=0;
  ymax=N;

//  // Generate samples
//  for (i=0;i<N;i++) {
//    samples[i]=(50*sin(2*M_PI*i*3300/SampleFreq)+50*sin(2*M_PI*i*5700/SampleFreq)+50*sin(2*M_PI*i*25700/SampleFreq)+100);
//     data[i]=samples[i]*(0.54-0.46*cos(2*M_PI*i/N)); // Hamming Window
//  }
  // Scan frequencies
  for (freq=(int)(SamplingFreq/2/N)+1;freq<=SamplingFreq/2;freq+=(int)(SamplingFreq/2/N)+1) {
    coeff=2*cos(2*M_PI*freq/SampleFreq);
    s_prev=0.0;
    s_prev2=0.0;
    for (i=0;i<N;i++) {
      // Goertzel
      s=data[i]+coeff*s_prev-s_prev2;
      s_prev2=s_prev;
      s_prev=s;
    }
    // Get magnitude
    magn=2*sqrt(s_prev2*s_prev2+s_prev*s_prev-coeff*s_prev*s_prev2)/N;
    //printf("Freq: %6f Mag: %6.4f\r\n",freq,magn);
    data_mag[char_i] = magn;
    char_i += 1;
  }

  //get xmax for scaling
  for (i = 0; i < N ; i++) {
      if ( xmax < data_mag[i] )  {
        xmax = data_mag[i];
       }
  }

  //scaled data
  for (i = 0; i < N ; i++){
    your_text [i] = (int)pow(2,((int)data_mag[i]*N/(int)xmax))-1;
//    printf("%d\r\n",(int) data_mag[i]);
  }

//printf("\n");
  for (i = 0; i < N ; i++){
    your_text [i] = (int)pow(2,((int)data_mag[i]*N/(int)xmax))-1;
//    printf("%d\r\n",(int)your_text[i]);
}
}

int main(void)
{
//Initilize 8x8 Led
 for (int i=0 ; i < 8 ; i++)
  { 
    shiftOut1(latchPinCol, dataPin, clockPin, 1); 
  }

    while(1){
	// Get Analog input
//	for (int i = 0; i<N ;i++){
//	    samples[i] = 3.3 * (MicIn.read() / 65536);
//	}

//	for (int i = 0 ; i<N; i++){
//	data[i] = samples[i]*(0.54-0.46*cos(2*M_PI*i/N)); // Hamming Window
//	}

        //Goertzel fft
//        goertzel_fft();

        //Update 8x8 Led
        update_8x8_led();
    }
}
