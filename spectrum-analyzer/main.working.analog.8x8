#include <arm_math.h>
#include "mbed.h"
#include "stats_report.h"
// Uses Daniil Guitelson's BGI library


DigitalOut latchPinCol(D8);
DigitalOut latchPinRow(D7);
DigitalOut clockPin(D12);
DigitalOut dataPin(D11);
AnalogIn MicIn(A0);

Serial pc(USBTX, USBRX);

// 16 point FFT
#define N		16
//#define PI	3.141

int REX[N];
int IMX[N];
uint16_t MAG[N];
uint8_t led_buf[8];
volatile uint8_t n_count = 0;
volatile uint8_t n_done = 1;
// End of FFT declaration

//AnalogDeclaration
volatile uint16_t adc_value = 0;
Ticker SampleAnalogA1;
volatile int kbhit;

void shiftOut(DigitalOut& mylatchPin, DigitalOut& myDataPin, DigitalOut&  myClockPin, char myDataOut) {

  // This shifts 8 bits out MSB first, 
  //on the rising edge of the clock,
  //clock idles low
 //internal function setup
  int i = 0;
  int pinState;

 //clear everything out just in case to
 //prepare shift register for bit shifting
  mylatchPin = 0;
  myDataPin  = 0;
  myClockPin = 0;
  //for each bit in the byte myDataOutÃ¯Â¿Â½
  //NOTICE THAT WE ARE COUNTING DOWN in our for loop
  //This means that %00000001 or "1" will go through such
  //that it will be pin Q0 that lights. 
  for (i=7; i>=0; i--)  {
  //for (i=0; i<8; i++)  {
    //if the value passed to myDataOut and a bitmask result 
    // true then... so if we are at i=6 and our value is
    // %11010100 it would the code compares it to %01000000 
    // and proceeds to set pinState to 1.
    myClockPin = 0;
    if ( myDataOut &  (1<<i) ) {
      
      pinState = 1;

    } else { 

      pinState = 0;

    }
    //Sets the pin to HIGH or LOW depending on pinState
    myDataPin = pinState;
    //register shifts bits on upstroke of clock pin  i
    myClockPin = 1;
    //zero the data pin after shift to prevent bleed through
    myDataPin  = 0;
  }
  myClockPin = 0;
  mylatchPin = 1;
}

void update_8x8_led(){

int SCAN_FREQUENCY = 50;

    for (int scanning_freq = 0; scanning_freq < SCAN_FREQUENCY; scanning_freq++){
        for (int j = 0; j < 8; j++) {
            //ground latchPin and hold low for as long as you are transmitting
            shiftOut(latchPinRow, dataPin, clockPin, 1  << j);
    	    shiftOut(latchPinCol, dataPin, clockPin, led_buf[j]);
	    wait_ms(1);
        }  
    }
}


void fft()
{
	uint8_t nm1 = N - 1;
	uint8_t nd2 = N / 2;
	uint8_t m = log10(N)/log10(2);
	uint8_t j = nd2;
	uint8_t i, k, l;
	uint8_t le, le2;
	float ur, ui, sr, si;
	uint8_t jm1, ip;
	float tr, ti;
	
	// Set imaginary part input signal to 0
	for (i = 0; i <= nm1; i++)
	{
		IMX[i] = 0;
	}
	
	// Bit reversal sorting
	for (i = 1; i <= N-2; i++)
	{
		if (i >= j) goto a;
		tr = REX[j];
		ti = IMX[j];
		REX[j] = REX[i];
		IMX[j] = IMX[i];
		REX[i] = tr;
		IMX[i] = ti;
		a:
		k = nd2;
		b:
		if (k > j) goto c;
		j -= k;
		k /= 2;
		goto b;
		c:
		j += k;
	}

	// Loop for each FFT stage
	for (l = 1; l <= m; l++)
	{
		le = pow(2, l);
		le2 = le / 2;
		ur = 1;
		ui = 0;
		// Calculate sine and cosine values
		sr = cos(PI/le2);
		si = -sin(PI/le2);
		// Loop for each sub FFT
		for (j = 1; j <= le2; j++)
		{
			jm1 = j - 1;
			// Loop for each butterfly
			for (i = jm1; i <= nm1; i += le)
			{
				ip = i + le2;
				tr = REX[ip]*ur - IMX[ip]*ui;
				ti = REX[ip]*ui + IMX[ip]*ur;
				REX[ip] = REX[i] - tr;
				IMX[ip] = IMX[i] - ti;
				REX[i] = REX[i] + tr;
				IMX[i] = IMX[i] + ti;
			}
			tr = ur;
			ur = tr*sr - ui*si;
			ui = tr*si + ui*sr;
		}
	}
}

void mag_to_buf()
{
	uint8_t i, j;
	
	// Loop for each magnitude
	for (i = 0; i <= N/2; i++)
	{
		// Calculate magnitude
		MAG[i] = sqrt(REX[i]*REX[i] + IMX[i]*IMX[i]);
		
		// Scaling magnitude
		MAG[i] /= 64;
		if (MAG[i] > 8)
		{
			MAG[i] = 8;
		}
	}
	
	// Loop for each column
	for(i = 0; i <= 7; i++) 
	{
		// Loop for each row
		for (j = 0; j <= 7; j++)
		{
			// Clear magnitude value for column i
			led_buf[j] &= ~(1 << (i)); 		
		}
		// Loop for each row
		// Display 8 point frequency spectrum (MAG) from index 1 to 8
		// Frequency spectrum at index 0 (DC value) is not displayed
		// Frequency spectrum from index 9 to 15 is not displayed
		for (j = 0; j < MAG[i+1]; j++)
		{
			// Set magnitude value for column i
			led_buf[j] |= (1 << (i)); 		
		}
	}
}

void vUpdate(void){
    kbhit = 1;
}

void read_adc_to_memory()
{
    unsigned short TempReadAnalog[N];
    Ticker Period;
    kbhit = 0;    
    Period.attach_us(&vUpdate,28.44);
    
    for (int i = 0 ; i < N ; i ++)
    {
        while(kbhit==0);
        kbhit=0;
        REX[i] = MicIn.read_u16();    
    }
    Period.detach();
}

void TIM3_IRQHandler()
{
	static uint8_t s = 0;
	static uint8_t l = 0;
	
	// TIM3 interrupt at 35.15kHz
//	if (TIM_GetITStatus(TIM3, TIM_IT_Update))
//	{
		// Read ADC value (10-bit PWM)
		adc_value = MicIn.read_u16() >> 2;
		// Write to PWM (audio loopback)
		//write_pwm(adc_value);
		
		// Sampling N point FFT at 17.5kHz
		s++;
		if (s >= 2)
		{
			if (n_done == 0)
			{
				REX[n_count++] = adc_value;
				
				if (n_count >= N)
				{
					n_done = 1;
					n_count = 0;			
				}
			}
			s = 0;
//		}
		
		// LED matrix scanning at 1kHz
		l++;
		if (l >= 35)
		{
			update_8x8_led();
			l = 0;
		}
		
	}
}


int main(void)
{

	while (1)
	{
	// Wait until sampling is done
     	read_adc_to_memory();
	fft();
	mag_to_buf();
        update_8x8_led();

        //for(int i=0 ; i < 8 ; i ++){
//		printf("%d\r\n",(int)led_buf[i]);
 //       }
	}
}
